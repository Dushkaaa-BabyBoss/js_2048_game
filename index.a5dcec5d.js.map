{"mappings":"C,A,W,ICIM,EAAO,GCFb,CAAA,eESoC,EFT9B,SAAA,EAeQ,CAAY,GAfpB,ACFN,SAA2B,CAAQ,CAAE,CAAW,EAC5C,GAAI,CAAE,CAAA,aAAoB,CAAA,EAAc,MAAM,AAAI,UAAU,oCAChE,EDAM,IAAA,CAAA,GAgBF,IAAI,CAAC,YAAY,CAAG,CAClB,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAED,IAAI,CAAC,KAAK,CAAG,GAAgB,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,YAAY,GACxE,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,M,CAzBZ,OES8B,EFT9B,C,CA4BJ,IAAA,cAAA,MAAA,SAAY,CAAI,CAAE,CAAI,EACpB,GAAI,EAAK,MAAM,GAAK,EAAK,MAAM,CAC7B,MAAO,CAAA,EAGT,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAE,IAC/B,GAAI,CAAI,CAAC,EAAE,GAAK,CAAI,CAAC,EAAE,CACrB,MAAO,CAAA,EAIX,MAAO,CAAA,CACT,C,E,CAEA,IAAA,WAAA,MAAA,WAGE,IAAK,I,E,I,CAFD,EAAc,CAAA,EAET,EAAI,EAAG,EAAI,EAAG,KAAvB,A,S,C,EAGE,IAAK,IAFD,EAAS,EAAK,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,SAAC,CAAnC,EAA6C,OAAA,AAAU,IAAV,C,GAEpC,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,EAAK,KAAK,EAAI,CAAM,CAAC,EAAE,CACvB,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,EAAc,CAAA,GAMlB,IAFA,EAAS,EAAO,MAAM,CAAC,SAAC,CAAxB,EAAkC,OAAA,AAAU,IAAV,C,GAE3B,EAAO,MAAM,CAAG,GACrB,EAAO,IAAI,CAAC,GAGT,EAAK,WAAW,CAAC,EAAK,KAAK,CAAC,EAAE,CAAE,IACnC,CAAA,EAAc,CAAA,CADhB,EAIA,EAAK,KAAK,CAAC,EAAE,CAAG,CAClB,EAvBA,EAyBoB,CAAA,YAAhB,IAAI,CAAC,MAAM,EAAkB,GAC/B,IAAI,CAAC,aAAa,EAEtB,C,E,CACA,IAAA,YAAA,MAAA,WAGE,IAAK,I,E,I,CAFD,EAAc,CAAA,EAET,EAAI,EAAG,EAAI,EAAG,KAAvB,A,S,C,EAME,IAAK,IALD,EAAS,EAAK,KAAK,CAAC,EAAE,CACvB,KAAK,GACL,OAAO,GACP,MAAM,CAAC,SAAC,CAHX,EAGqB,OAAA,AAAU,IAAV,C,GAEZ,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,EAAK,KAAK,EAAI,CAAM,CAAC,EAAE,CACvB,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,EAAc,CAAA,GAMlB,IAFA,EAAS,EAAO,MAAM,CAAC,SAAC,CAAxB,EAAkC,OAAA,AAAU,IAAV,C,GAE3B,EAAO,MAAM,CAAG,GACrB,EAAO,IAAI,CAAC,GAGd,EAAO,OAAO,GAET,EAAK,WAAW,CAAC,EAAK,KAAK,CAAC,EAAE,CAAE,IACnC,CAAA,EAAc,CAAA,CADhB,EAIA,EAAK,KAAK,CAAC,EAAE,CAAG,CAClB,EA5BA,EA8BoB,CAAA,YAAhB,IAAI,CAAC,MAAM,EAAkB,GAC/B,IAAI,CAAC,aAAa,EAEtB,C,E,CACA,IAAA,SAAA,MAAA,WAGE,IAAK,I,E,I,C,E,S,C,EAGH,IAAK,IAFD,EAAS,EAAE,CAEN,EAAM,EAAG,EAAM,EAAG,IACI,IAAzB,EAAK,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAO,IAAI,CAAC,EAAK,KAAK,CAAC,EAAI,CAAC,EAAI,EAIpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAE,IAC7B,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,EAAK,KAAK,EAAI,CAAM,CAAC,EAAE,CACvB,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,EAAc,CAAA,GAMlB,IAFA,EAAS,EAAO,MAAM,CAAC,SAAC,CAAxB,EAAkC,OAAA,AAAU,IAAV,C,GAE3B,EAAO,MAAM,CAAG,GACrB,EAAO,IAAI,CAAC,GAIX,EAAK,WAAW,CACf,EAAK,KAAK,CAAC,GAAG,CAAC,SAAC,CAFpB,EAE4B,OAAA,CAAG,CAAC,EAAI,AAChC,GAAA,IAGF,CAAA,EAAc,CAAA,CAHZ,EAMJ,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,EAAK,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,CAAM,CAAC,EAAI,AAEtC,EAtCI,EAAc,CAAA,EAET,EAAM,EAAG,EAAM,EAAG,IAA3B,EAAA,EAsCoB,CAAA,YAAhB,IAAI,CAAC,MAAM,EAAkB,GAC/B,IAAI,CAAC,aAAa,EAEtB,C,E,CAEA,IAAA,WAAA,MAAA,WAGE,IAAK,I,E,I,CAFD,EAAc,CAAA,EAET,EAAM,EAAG,EAAM,EAAG,KAA3B,A,S,C,EACE,IAAI,EAAS,EAAE,CAEf,EAAO,OAAO,GAEd,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACI,IAAzB,EAAK,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAO,IAAI,CAAC,EAAK,KAAK,CAAC,EAAI,CAAC,EAAI,EAIpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAE,IAC7B,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,EAAK,KAAK,EAAI,CAAM,CAAC,EAAE,CACvB,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,EAAc,CAAA,GAMlB,IAFA,AADA,CAAA,EAAS,EAAO,MAAM,CAAC,SAAC,CAAxB,EAAkC,OAAA,AAAU,IAAV,C,E,EAC3B,OAAO,GAEP,EAAO,MAAM,CAAG,GACrB,EAAO,IAAI,CAAC,GAGd,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,EAAK,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,CAAM,CAAC,EAAI,EAAI,AAE1C,EA7BA,EA+BoB,CAAA,YAAhB,IAAI,CAAC,MAAM,EAAkB,GAC/B,IAAI,CAAC,aAAa,EAEtB,C,E,CAKA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,AACnB,C,E,CAKA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,AACnB,C,E,CAYA,IAAA,YAAA,MAAA,iBACE,AAAI,AAAgB,SAAhB,IAAI,CAAC,MAAM,CACN,OAGL,IAAI,CAAC,QAAQ,GACR,MAGL,IAAI,CAAC,SAAS,GACT,OAGF,SACT,C,E,CAEA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAC,CAAxB,EAAgC,OAAA,EAAI,QAAQ,CAAC,K,EAC/C,C,E,CAEA,IAAA,YAAA,MAAA,WACE,GAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAC,CAArB,EAA6B,OAAA,EAAI,QAAQ,CAAC,EACxC,GAAA,MAAO,CAAA,EAGT,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,GACG,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,EAAE,EAClD,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,EAAE,CAAC,EAAE,CAEnD,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,C,E,CAEA,IAAA,QAAA,MAAA,WACE,IAAI,CAAC,KAAK,CAAG,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,YAAY,GACxD,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,UACd,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,aAAa,EACpB,C,E,CAEA,IAAA,gBAAA,MAAA,WAGE,IAAK,IAFC,EAAa,EAAE,CAEZ,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACI,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAClB,EAAW,IAAI,CAAC,CAAE,IAAK,EAAG,IAAK,CAAE,GAKvC,GAAI,EAAW,MAAM,CAAG,EAAG,CACzB,IACE,EAAA,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,CADnD,EACN,EADM,GAAA,CAAK,EACX,EADW,GAAb,AAGA,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CACnD,CACF,C,E,CAEA,IAAA,UAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,EACnB,C,E,CEtRkB,AAZpB,SAA2B,CAAM,CAAE,CAAK,EACpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAK,CACnC,IAAI,EAAa,CAAK,CAAC,EAAE,AACzB,CAAA,EAAW,UAAU,CAAG,EAAW,UAAU,EAAI,CAAA,EACjD,EAAW,YAAY,CAAG,CAAA,EAEtB,UAAW,GAAY,CAAA,EAAW,QAAQ,CAAG,CAAA,CAAjD,EAEA,OAAO,cAAc,CAAC,EAAQ,EAAW,GAAG,CAAE,EAClD,CACJ,EAEsC,AFVhC,EEU4C,SAAS,CAAE,GFVvD,C,G,ED6BN,SAAS,IACP,IA2BM,EAEA,EACA,EACA,EA/BA,EAAQ,EAAK,QAAQ,GAI3B,AAFa,SAAS,gBAAgB,CAAC,cAElC,OAAO,CAAC,SAAC,CAAA,CAAY,CAA1B,EAGE,AAFc,EAAW,gBAAgB,CAAC,eAEpC,OAAO,CAAC,SAAC,CAAA,CAAM,CAArB,EACE,IAAM,EAAQ,CAAK,CAAC,EAAS,CAAC,EAAU,AAExC,CAAA,EAAK,WAAW,CAAG,AAAU,IAAV,EAAc,GAAK,EACtC,EAAK,SAAS,CAAG,aAEH,IAAV,GACF,EAAK,SAAS,CAAC,GAAG,CAAE,eAAoB,MAAA,CAAN,GAEtC,EACF,GAIA,AAFqB,SAAS,aAAa,CAAC,eAE/B,WAAW,CAAG,EAAK,QAAQ,GAMlC,EAAa,EAAK,SAAS,GAE3B,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBAE3C,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,EAAW,SAAS,CAAC,GAAG,CAAC,UACzB,EAAY,SAAS,CAAC,GAAG,CAAC,UAEtB,AAAe,SAAf,EACF,EAAa,SAAS,CAAC,MAAM,CAAC,UACrB,AAAe,QAAf,EACT,EAAW,SAAS,CAAC,MAAM,CAAC,UACJ,SAAf,GACT,EAAY,SAAS,CAAC,MAAM,CAAC,SAlBjC,CA9CA,SAAS,gBAAgB,CAAC,UAAW,SAAC,CAAtC,EACE,OAAQ,EAAE,GAAG,EACX,IAAK,UACH,EAAK,MAAM,GACX,KACF,KAAK,YACH,EAAK,QAAQ,GACb,KACF,KAAK,YACH,EAAK,QAAQ,GACb,KACF,KAAK,aACH,EAAK,SAAS,GACd,KACF,SACE,OAAO,CACX,CAEA,GACF,GAiDA,IAAM,EAAc,SAAS,aAAa,CAAC,UAE3C,EAAY,gBAAgB,CAAC,QAAS,WAChC,EAAY,SAAS,CAAC,QAAQ,CAAC,WACjC,EAAY,SAAS,CAAC,OAAO,CAAC,QAAS,WACvC,EAAY,WAAW,CAAG,WAE5B,EAAK,KAAK,GACV,GACF,E","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.defaultState = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.board = initialState || JSON.parse(JSON.stringify(this.defaultState));\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"arraysEqual\",\n            value: function arraysEqual(arr1, arr2) {\n                if (arr1.length !== arr2.length) return false;\n                for(var i = 0; i < arr1.length; i++){\n                    if (arr1[i] !== arr2[i]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(i) {\n                    var newRow = _this.board[i].filter(function(value) {\n                        return value !== 0;\n                    });\n                    for(var j = 0; j < newRow.length - 1; j++)if (newRow[j] === newRow[j + 1]) {\n                        newRow[j] *= 2;\n                        _this.score += newRow[j];\n                        newRow[j + 1] = 0;\n                        changeBoard = true;\n                    }\n                    newRow = newRow.filter(function(value) {\n                        return value !== 0;\n                    });\n                    while(newRow.length < 4)newRow.push(0);\n                    if (!_this.arraysEqual(_this.board[i], newRow)) changeBoard = true;\n                    _this.board[i] = newRow;\n                };\n                var changeBoard = false;\n                for(var i = 0; i < 4; i++)_loop(i);\n                if (this.status === \"playing\" && changeBoard) this.addRandomTile();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(i) {\n                    var newRow = _this.board[i].slice().reverse().filter(function(value) {\n                        return value !== 0;\n                    });\n                    for(var j = 0; j < newRow.length - 1; j++)if (newRow[j] === newRow[j + 1]) {\n                        newRow[j] *= 2;\n                        _this.score += newRow[j];\n                        newRow[j + 1] = 0;\n                        changeBoard = true;\n                    }\n                    newRow = newRow.filter(function(value) {\n                        return value !== 0;\n                    });\n                    while(newRow.length < 4)newRow.push(0);\n                    newRow.reverse();\n                    if (!_this.arraysEqual(_this.board[i], newRow)) changeBoard = true;\n                    _this.board[i] = newRow;\n                };\n                var changeBoard = false;\n                for(var i = 0; i < 4; i++)_loop(i);\n                if (this.status === \"playing\" && changeBoard) this.addRandomTile();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(col) {\n                    var newCol = [];\n                    for(var row = 0; row < 4; row++)if (_this.board[row][col] !== 0) newCol.push(_this.board[row][col]);\n                    for(var i = 0; i < newCol.length; i++)if (newCol[i] === newCol[i + 1]) {\n                        newCol[i] *= 2;\n                        _this.score += newCol[i];\n                        newCol[i + 1] = 0;\n                        changeBoard = true;\n                    }\n                    newCol = newCol.filter(function(value) {\n                        return value !== 0;\n                    });\n                    while(newCol.length < 4)newCol.push(0);\n                    if (!_this.arraysEqual(_this.board.map(function(row) {\n                        return row[col];\n                    }), newCol)) changeBoard = true;\n                    for(var row1 = 0; row1 < 4; row1++)_this.board[row1][col] = newCol[row1];\n                };\n                var changeBoard = false;\n                for(var col = 0; col < 4; col++)_loop(col);\n                if (this.status === \"playing\" && changeBoard) this.addRandomTile();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(col) {\n                    var newCol = [];\n                    newCol.reverse();\n                    for(var row = 0; row < 4; row++)if (_this.board[row][col] !== 0) newCol.push(_this.board[row][col]);\n                    for(var i = 0; i < newCol.length; i++)if (newCol[i] === newCol[i + 1]) {\n                        newCol[i] *= 2;\n                        _this.score += newCol[i];\n                        newCol[i + 1] = 0;\n                        changeBoard = true;\n                    }\n                    newCol = newCol.filter(function(value) {\n                        return value !== 0;\n                    });\n                    newCol.reverse();\n                    while(newCol.length < 4)newCol.push(0);\n                    for(var row1 = 0; row1 < 4; row1++)_this.board[row1][col] = newCol[3 - row1];\n                };\n                var changeBoard = false;\n                for(var col = 0; col < 4; col++)_loop(col);\n                if (this.status === \"playing\" && changeBoard) this.addRandomTile();\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                if (this.status === \"idle\") return \"idle\";\n                if (this.checkWin()) return \"win\";\n                if (this.checkLose()) return \"lose\";\n                return \"playing\";\n            }\n        },\n        {\n            key: \"checkWin\",\n            value: function checkWin() {\n                return this.board.some(function(row) {\n                    return row.includes(2048);\n                });\n            }\n        },\n        {\n            key: \"checkLose\",\n            value: function checkLose() {\n                if (this.board.some(function(row) {\n                    return row.includes(0);\n                })) return false;\n                for(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++){\n                    if (j < 3 && this.board[i][j] === this.board[i][j + 1] || i < 3 && this.board[i][j] === this.board[i + 1][j]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                this.board = JSON.parse(JSON.stringify(this.defaultState));\n                this.score = 0;\n                this.status = \"playing\";\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var i = 0; i < 4; i++){\n                    for(var j = 0; j < 4; j++)if (this.board[i][j] === 0) emptyCells.push({\n                        row: i,\n                        col: j\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var _emptyCells_Math_floor = emptyCells[Math.floor(Math.random() * emptyCells.length)], row = _emptyCells_Math_floor.row, col = _emptyCells_Math_floor.col;\n                    this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                return this.start();\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n// Start and restart Game (change button)\n// Write your code here\ndocument.addEventListener(\"keydown\", function(e) {\n    switch(e.key){\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        default:\n            return 0;\n    }\n    $197cd56b15c33885$var$updateUI();\n});\nfunction $197cd56b15c33885$var$updateUI() {\n    var board = $197cd56b15c33885$var$game.getState();\n    var rows = document.querySelectorAll(\".field-row\");\n    rows.forEach(function(rowElement, rowIndex) {\n        var cells = rowElement.querySelectorAll(\".field-cell\");\n        cells.forEach(function(cell, cellIndex) {\n            var value = board[rowIndex][cellIndex];\n            cell.textContent = value === 0 ? \"\" : value;\n            cell.className = \"field-cell\";\n            if (value !== 0) cell.classList.add(\"field-cell--\".concat(value));\n        });\n    });\n    var scoreElement = document.querySelector(\".game-score\");\n    scoreElement.textContent = $197cd56b15c33885$var$game.getScore();\n    $197cd56b15c33885$var$updateStatus();\n}\nfunction $197cd56b15c33885$var$updateStatus() {\n    var statusGame = $197cd56b15c33885$var$game.getStatus();\n    var messageStart = document.querySelector(\".message-start\");\n    var messageWin = document.querySelector(\".message-win\");\n    var messageLose = document.querySelector(\".message-lose\");\n    messageStart.classList.add(\"hidden\");\n    messageWin.classList.add(\"hidden\");\n    messageLose.classList.add(\"hidden\");\n    if (statusGame === \"idle\") messageStart.classList.remove(\"hidden\");\n    else if (statusGame === \"win\") messageWin.classList.remove(\"hidden\");\n    else if (statusGame === \"lose\") messageLose.classList.remove(\"hidden\");\n}\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".start\");\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$startButton.classList.contains(\"start\")) {\n        $197cd56b15c33885$var$startButton.classList.replace(\"start\", \"restart\");\n        $197cd56b15c33885$var$startButton.textContent = \"Restart\";\n    }\n    $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$updateUI();\n});\n\n})();\n//# sourceMappingURL=index.a5dcec5d.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Start and restart Game (change button)\n\n// Write your code here\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    default:\n      return 0;\n  }\n\n  updateUI();\n});\n\nfunction updateUI() {\n  const board = game.getState();\n\n  const rows = document.querySelectorAll('.field-row');\n\n  rows.forEach((rowElement, rowIndex) => {\n    const cells = rowElement.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, cellIndex) => {\n      const value = board[rowIndex][cellIndex];\n\n      cell.textContent = value === 0 ? '' : value;\n      cell.className = 'field-cell';\n\n      if (value !== 0) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n    });\n  });\n\n  const scoreElement = document.querySelector('.game-score');\n\n  scoreElement.textContent = game.getScore();\n\n  updateStatus();\n}\n\nfunction updateStatus() {\n  const statusGame = game.getStatus();\n\n  const messageStart = document.querySelector('.message-start');\n  const messageWin = document.querySelector('.message-win');\n  const messageLose = document.querySelector('.message-lose');\n\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  if (statusGame === 'idle') {\n    messageStart.classList.remove('hidden');\n  } else if (statusGame === 'win') {\n    messageWin.classList.remove('hidden');\n  } else if (statusGame === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nconst startButton = document.querySelector('.start');\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    startButton.classList.replace('start', 'restart');\n    startButton.textContent = 'Restart';\n  }\n  game.start();\n  updateUI();\n});\n","'use strict';\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.defaultState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.board = initialState || JSON.parse(JSON.stringify(this.defaultState));\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  moveLeft() {\n    let changeBoard = false;\n\n    for (let i = 0; i < 4; i++) {\n      let newRow = this.board[i].filter((value) => value !== 0);\n\n      for (let j = 0; j < newRow.length - 1; j++) {\n        if (newRow[j] === newRow[j + 1]) {\n          newRow[j] *= 2;\n          this.score += newRow[j];\n          newRow[j + 1] = 0;\n          changeBoard = true;\n        }\n      }\n\n      newRow = newRow.filter((value) => value !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      if (!this.arraysEqual(this.board[i], newRow)) {\n        changeBoard = true;\n      }\n\n      this.board[i] = newRow;\n    }\n\n    if (this.status === 'playing' && changeBoard) {\n      this.addRandomTile();\n    }\n  }\n  moveRight() {\n    let changeBoard = false;\n\n    for (let i = 0; i < 4; i++) {\n      let newRow = this.board[i]\n        .slice()\n        .reverse()\n        .filter((value) => value !== 0);\n\n      for (let j = 0; j < newRow.length - 1; j++) {\n        if (newRow[j] === newRow[j + 1]) {\n          newRow[j] *= 2;\n          this.score += newRow[j];\n          newRow[j + 1] = 0;\n          changeBoard = true;\n        }\n      }\n\n      newRow = newRow.filter((value) => value !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      newRow.reverse();\n\n      if (!this.arraysEqual(this.board[i], newRow)) {\n        changeBoard = true;\n      }\n\n      this.board[i] = newRow;\n    }\n\n    if (this.status === 'playing' && changeBoard) {\n      this.addRandomTile();\n    }\n  }\n  moveUp() {\n    let changeBoard = false;\n\n    for (let col = 0; col < 4; col++) {\n      let newCol = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      for (let i = 0; i < newCol.length; i++) {\n        if (newCol[i] === newCol[i + 1]) {\n          newCol[i] *= 2;\n          this.score += newCol[i];\n          newCol[i + 1] = 0;\n          changeBoard = true;\n        }\n      }\n\n      newCol = newCol.filter((value) => value !== 0);\n\n      while (newCol.length < 4) {\n        newCol.push(0);\n      }\n\n      if (\n        !this.arraysEqual(\n          this.board.map((row) => row[col]),\n          newCol,\n        )\n      ) {\n        changeBoard = true;\n      }\n\n      for (let row = 0; row < 4; row++) {\n        this.board[row][col] = newCol[row];\n      }\n    }\n\n    if (this.status === 'playing' && changeBoard) {\n      this.addRandomTile();\n    }\n  }\n\n  moveDown() {\n    let changeBoard = false;\n\n    for (let col = 0; col < 4; col++) {\n      let newCol = [];\n\n      newCol.reverse();\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      for (let i = 0; i < newCol.length; i++) {\n        if (newCol[i] === newCol[i + 1]) {\n          newCol[i] *= 2;\n          this.score += newCol[i];\n          newCol[i + 1] = 0;\n          changeBoard = true;\n        }\n      }\n      newCol = newCol.filter((value) => value !== 0);\n      newCol.reverse();\n\n      while (newCol.length < 4) {\n        newCol.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        this.board[row][col] = newCol[3 - row];\n      }\n    }\n\n    if (this.status === 'playing' && changeBoard) {\n      this.addRandomTile();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.status === 'idle') {\n      return 'idle';\n    }\n\n    if (this.checkWin()) {\n      return 'win';\n    }\n\n    if (this.checkLose()) {\n      return 'lose';\n    }\n\n    return 'playing';\n  }\n\n  checkWin() {\n    return this.board.some((row) => row.includes(2048));\n  }\n\n  checkLose() {\n    if (this.board.some((row) => row.includes(0))) {\n      return false;\n    }\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (\n          (j < 3 && this.board[i][j] === this.board[i][j + 1]) ||\n          (i < 3 && this.board[i][j] === this.board[i + 1][j])\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  start() {\n    this.board = JSON.parse(JSON.stringify(this.defaultState));\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push({ row: i, col: j });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { row, col } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  restart() {\n    return this.start();\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","Constructor","TypeError","defaultState","board","JSON","parse","stringify","score","status","key","value","arr1","arr2","length","i","_this","changeBoard","_loop","newRow","filter","j","push","arraysEqual","addRandomTile","slice","reverse","col","newCol","row","map","row1","checkWin","checkLose","some","includes","emptyCells","_emptyCells_Math_floor","Math","floor","random","start","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","$197cd56b15c33885$var$updateUI","statusGame","messageStart","messageWin","messageLose","getState","rows","document","querySelectorAll","forEach","rowElement","rowIndex","cells","cell","cellIndex","textContent","className","classList","add","concat","scoreElement","querySelector","getScore","getStatus","remove","addEventListener","e","moveUp","moveDown","moveLeft","moveRight","$197cd56b15c33885$var$startButton","contains","replace"],"version":3,"file":"index.a5dcec5d.js.map"}